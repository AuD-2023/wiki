{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Haudy","text":"<p>Hi!</p> <p>Sch\u00f6n, dass Sie den Weg in unser kleines Einsteigerwiki gefunden haben!</p> <p>Hier finden Sie Informationen rund um das Bearbeiten von Haus\u00fcbungen - von der Einrichtung der Entwicklungsumgebung bis hin zur Abgabe.</p>"},{"location":"exercises/complaints/","title":"Beanstandungen","text":""},{"location":"exercises/complaints/#was-ist-eine-beanstandung","title":"Was ist eine Beanstandung?","text":"<ul> <li> <p>Sie haben ab dem Zeitpunkt der Bewertung Ihrer Haus\u00fcbung zwei Wochen Zeit, Ihre Bewertung zu beanstanden.</p> </li> <li> <p>W\u00e4hlen Sie im Abschnitt des jeweiligen \u00dcbungsblatts das Modul Beanstandung zur Bewertung von \u00dcbungsblatt aus. Geben Sie im Textfeld Ihre Beanstandung begr\u00fcndet separiert nach Nummer der Kriterien (links neben dem Kriterium) an. Die Nachkorrektur kann auch zu einem Punktabzug f\u00fchren. Sobald Ihre Beanstandung bearbeitet wurde, wird Ihre Beanstandung als bewertet markiert. Nach Ende der Beanstandungsfrist k\u00f6nnen keine Beanstandungen mehr entgegengenommen werden. Es werden nur Beanstandungen bearbeitet, die \u00fcber den beschriebenen Weg eingegangen sind.</p> </li> </ul> <p>Achtung</p> <p>Nachdem Sie Ihre Beanstandung abgegeben haben, k\u00f6nnen Sie diese nicht mehr \u00e4ndern. Ihre Beanstandung wird danach bearbeitet.</p>"},{"location":"exercises/complaints/#bevor-sie-eine-beanstandung-schreiben","title":"Bevor Sie eine Beanstandung schreiben","text":"<ul> <li>Sie haben sich Ihre Bewertung genau angeguckt, inklusive der Hinweise/Fehlermeldungen in der Kommentar-Spalte</li> <li>Sie haben sich je Kriterium, bei dem Ihnen Punkte fehlen, \u00fcberpr\u00fcft,<ul> <li>warum der Fehler auftritt</li> <li>ob Sie alle f\u00fcr das Kriterium relevanten verbindlichen Anforderungen eingehalten haben</li> <li>ob Sie alle f\u00fcr das Kriterium erforderlichen Aufgaben vollst\u00e4ndig bearbeitet haben</li> </ul> </li> <li>Sie haben Ihre L\u00f6sung mit der Musterl\u00f6sungen verglichen</li> <li>Sie haben Public- und Private-Tests auf Ihrer L\u00f6sung ausgef\u00fchrt</li> <li>Sie haben Ihre L\u00f6sung mit dem Debugger ausgef\u00fchrt und sich insbesondere das Verhalten des Programms in der \u201eFehlersituation\u201c angeschaut</li> </ul>"},{"location":"exercises/complaints/#wie-sieht-eine-gute-beanstandung-aus","title":"Wie sieht eine gute Beanstandung aus?","text":"<p>Beanstandungen m\u00fcssen immer gut begr\u00fcndet sein und sollten sich auf konkrete Kriterien beziehen, f\u00fcr die Sie Ihrer Auffassung nach mehr Punkte verdienen.</p> <p>Beispielaufbau:</p> <ol> <li>Auf welches Kriterium beziehen Sie sich:<ul> <li>\"Ich habe f\u00fcr Kriterium X nur 2 von 4 Punkten bekommen. Im Kommentar steht // als Fehler steht da, dass \u2026 auftritt // dass ... nicht eingehalten wurde // ...\"</li> </ul> </li> <li>Woraus schlie\u00dfen Sie, dass die Bewertung falsch ist:<ul> <li>\"Ich habe meine L\u00f6sung mit der Musterl\u00f6sung verglichen // meine L\u00f6sung debuggt // die private tests auf meiner L\u00f6sung ausgef\u00fchrt // ...\"</li> </ul> </li> <li>Was ist Ihnen dabei aufgefallen, weshalb verdient Ihre L\u00f6sung mehr Punkte in Bezug auf dieses Kriterium:<ul> <li>\"Ich bin der Meinung, dass meine L\u00f6sung die Aspekte \u2026 // eigentlich erf\u00fcllt, weil ... // ...\"</li> </ul> </li> </ol>"},{"location":"exercises/complaints/#wie-sieht-eine-schlechte-beanstandung-aus","title":"Wie sieht eine schlechte Beanstandung aus?","text":"<p>Beanstandungen dieser Art werden h\u00f6chstwahrscheinlich ignoriert:</p> <p>Beispiel</p> <p><pre><code>Ich bin mir sicher, dass meine Abgabe korrekt ist. Bitte nochmal anschauen.\n</code></pre> Erkl\u00e4rung: Ohne Verweis auf spezifische Kriterien und \u00e4hnliche Beschreibung, ist der Zeitaufwand f\u00fcr die Bewertung der Beanstandung zu hoch.</p> <p>Beispiel</p> <p><pre><code>Alle Public-Tests funktionieren bei mir. Wieso habe ich nicht volle Punktzahl?\n</code></pre> Erkl\u00e4rung: Die Public-Tests garantieren nicht die volle Punktzahl, nur mindestens 50% der Punkte. In den Private-Tests k\u00f6nnen etwa Randf\u00e4lle oder \u00e4hnliches gepr\u00fcft werden, die Sie m\u00f6glicherweise nicht beachtet haben.</p> <p>Beispiel</p> <p><pre><code>Ich bitte um eine vollst\u00e4ndige Erkl\u00e4rung meiner Fehler!\n</code></pre> Erkl\u00e4rung: Bestandungen dienen zur Korrektur einer fehlerhaften oder unfairen Bewertung. Eine Erkl\u00e4rung f\u00fcr Aufgaben oder f\u00fcr Ihre Fehler k\u00f6nnen Sie durch diverse andere Angebote erhalten, wie zum Beispiel: Intensivbetreuung, L\u00f6sung der Haus\u00fcbung, Fragen auf Discord/Moodle, Sprechstunden, ...</p>"},{"location":"exercises/documentation/","title":"Dokumentation von Java-QuellCode","text":"<p>Information</p> <p>In der Softwareentwicklung ist es wichtig, seinen Code ordentlich zu dokumentieren, damit es m\u00f6glich ist, diesen ohne viel Aufwand zu verstehen. Dies hilft sowohl anderen, die mit Ihrem Code arbeiten oder ihn benutzen, als auch Ihnen selber, wenn Sie l\u00e4nger nicht mehr mit diesem gearbeitet haben. Die Dokumentation sollte dabei kurz erkl\u00e4ren, was der Code macht und wie er zu benutzen ist. Es sollte aber nicht erkl\u00e4rt werden, wie genau der Code funktioniert, sondern dieser sollte als eine Blackbox, in welche man nicht genauer hineingucken kann, betrachtet werden.</p> <ul> <li>In Java werden JavaDoc Kommentare als standardisierte Methode benutzt um Code zu dokumentieren.<ul> <li>JavaDoc Kommentare haben dabei den Vorteil, dass IDEs sie automatisch anzeigen k\u00f6nnen und HTML Seiten aus ihnen generiert werden k\u00f6nnen.</li> </ul> </li> <li>Jeder JavaDoc Kommentar beginnt dabei mit /** und endet mit */.   Jede neue Zeile beginnt mit einem *.</li> <li>JavaDoc Kommentare werden direkt \u00fcber die zugeh\u00f6rige Klasse, Methode, etc. geschrieben.</li> <li>Wenn Sie in IntelliJ \u00fcber einer \u00fcber einer Methode, Klasse, etc. /** schreiben und dann Enter dr\u00fccken, wird automatisch eine Vorlage f\u00fcr Sie erstellt.</li> <li>Ein JavaDoc Kommentar sieht dabei z.B. wie folgt aus:</li> </ul> <p>Beispiel</p> <pre><code>/**\n* This method accepts two real numbers belonging to a\n* vector and calculates the euclidean norm of said\n* vector.\n*\n* @param x first component of two-dimensional vector (x, y)\n* @param y second component of two-dimensional vector (x, y)\n* @return Euclidean norm of the vector (x,y)\n*/\ndouble euclid2(float x, float y) {\nreturn Math.sqrt(x*x + y*y);\n}\n</code></pre> <ul> <li>In der Dokumentation der Java Standardbibliothek finden Sie etliche Beispiele, wie gute JavaDoc Kommentare aussehen sollten.</li> </ul>"},{"location":"exercises/documentation/#aufbau","title":"Aufbau","text":"<ul> <li>Zu Beginn eines JavaDoc Kommentars steht eine allgemeine Beschreibung der Methode, welche auf alle Details der Methode eingeht und beschreibt was sie bewirkt, wie sie zu benutzten ist und was man dabei beachten muss.</li> <li>Danach folgen sogenannte Tags, welche mit einem @ und dem Namen des Tags beginnen.</li> <li>Jeder JavaDoc Kommentar muss dabei, falls notwendig, folgende Tags haben:<ul> <li>@param Parametername description Beschreibt kurz die Bedeutung des Parameters Parametername.   F\u00fcr jeden Parameter muss ein solcher Tag vorhanden sein.</li> <li>@return description Beschreibt kurz die Bedeutung der R\u00fcckgabe der Methode.   Wenn die Methode keine R\u00fcckgabe hat, wird dieser Tag weggelassen.</li> <li>@throws Exceptionname description Beschreibt kurz, in welchem Fall die Exception Exceptionname geworfen wird.   F\u00fcr jede Exception, welche in der throws-Klausel der Methode angegeben wird, muss ein solcher Tag vorhanden sein.<ul> <li>Optional k\u00f6nnen Sie diesen Tag auch f\u00fcr Runtimeexceptions hinzuf\u00fcgen, welche geworfen werden k\u00f6nnen.</li> </ul> </li> </ul> </li> </ul>"},{"location":"exercises/documentation/#verpflichtende-dokumentation","title":"Verpflichtende Dokumentation","text":"<ul> <li>Ab dem dritten \u00dcbungsblatt kann es vorkommen, dass von Ihnen gefordert wird, Ihren selbstgeschriebenen Code zu dokumentieren. Wenn dies der Fall ist, m\u00fcssen alle von Ihnen deklarierten Klassen, Interfaces, Enums und Methoden (inklusive Konstruktoren) mittels JavaDoc dokumentiert werden.</li> <li>Private Methoden und Methoden, welche andere, bereits dokumentierte, Methoden \u00fcberschreiben, sowie private Attribute und Enumerationselemente m\u00fcssen nicht dokumentiert werden.</li> </ul>"},{"location":"exercises/documentation/#einige-weitere-tags","title":"Einige weitere Tags","text":"<ul> <li>@author name Gibt den Autor an.   Kann nur in Klassen, Interface und Enums verwendet werden.</li> <li>@version version Gibt die Version an.   Kann nur in Klassen, Interface und Enums verwendet werden.</li> <li>@since version Gibt an, seit wann das Objekt verf\u00fcgbar ist.</li> <li>@see reference Erzeugt eine Referenz auf eine andere Dokumentation.</li> <li>@deprecated Gibt an, dass die Methode veraltet ist und nicht verwendet werden sollte.</li> <li>Eine vollst\u00e4ndige Liste finden Sie hier.</li> </ul>"},{"location":"exercises/download-import-unsupported/","title":"Importieren von Haus\u00fcbungen in nicht-unterst\u00fctzten IDEs","text":"<p>Achtung</p> <p>Bis auf dieses Guide wird kein Support f\u00fcr nicht-unterst\u00fctzte IDEs angeboten und die Verwendung solcher wird nicht empfohlen. Wenden Sie sich nicht an das Tutorium, wenn Sie Probleme mit der Verwendung von nicht-unterst\u00fctzten IDEs haben.</p> VS CodeEclipseNvim, EmacsAndere <ul> <li> <p>Empfohlene Extensions f\u00fcr Java-Entwicklung:</p> <ul> <li>Language Support for Java(TM) by Red Hat</li> <li>Debugger for Java</li> <li>Java Test Runner</li> <li>Gradle for Java</li> <li>Gradle Language Support</li> <li>Java Dependency Viewer</li> <li>IntelliCode</li> <li>Maven for Java</li> </ul> </li> <li> <p>Empfohlene Einstellungen  <pre><code>{\n\"java.import.gradle.enabled\": true,\n\"java.import.gradle.wrapper.enabled\": true,\n\"java.import.maven.enabled\": true,\n\"java.import.maven.wrapper.enabled\": true,\n\"java.import.generatesMetadataFilesAtProjectRoot\": true,\n\"java.configuration.updateBuildConfiguration\": \"interactive\",\n\"java.completion.filteredTypes\": [\n\"java.awt.List\",\n\"com.sun.*\",\n\"sun.*\",\n\"jdk.*\",\n\"org.graalvm.*\",\n\"io.micrometer.shaded.*\"\n]\n}\n</code></pre></p> </li> <li>Fix: Grader-Tests werden nicht erkannt<ul> <li>Da der Gradle-Support von VS Code noch nicht vollst\u00e4ndig ist, m\u00fcssen Sie f\u00fcr alle Tests au\u00dferhalb des <code>src/test/java</code>-Ordners manuell die <code>.classpath</code>-Datei anpassen. Dazu \u00f6ffnen Sie die Datei und f\u00fcgen folgenden Eintrag zu allen classpathentrys hinzu, die auf die Tests verweisen: <pre><code>&lt;attribute name=\"test\" value=\"true\"/&gt;\n</code></pre> Nun sollten alle Tests erkannt werden.</li> </ul> </li> <li>Gradle Tasks<ul> <li>F\u00fcr das Ausf\u00fchren, Debuggen und Abgeben verwenden Sie wie in IntelliJ die entsprechenden Tasks verwenden. Die \u00dcbersicht der Tasks finden Sie links im Gradle-Tab. (dieser ist nur sichtbar, wenn Sie ein Gradle-Projekt ge\u00f6ffnet haben)</li> </ul> </li> </ul> <ul> <li> <p>Importieren</p> <ul> <li>Sie k\u00f6nnen die Haus\u00fcbungen entweder importieren, indem Sie sich die zip Datei von Moodle herunterladen, entpacken und dann \u00fcber \"File\" -&gt; \"Import...\" -&gt; \"Gradle\" -&gt; \"Existing Gradle Project\" ausw\u00e4hlen, oder \u00fcber \"File\" -&gt; \"Import...\" -&gt; \"Git\" -&gt; \"Projects from Git\" -&gt; \"Clone URl\" die Daten des Git-Repositories eingeben.</li> </ul> </li> <li> <p>Gradle Tasks</p> <ul> <li>Sie k\u00f6nnen sich die \u00dcbersicht \u00fcber die Gradle Tasks entweder an der rechten Seite des Bildschirms \u00fcber das Gradle Symbol, oder \u00fcber \"Window\" -&gt; \"Show View\" -&gt; \"Other...\" -&gt; \"Gradle\" -&gt; \"Gradle Tasks\" -&gt; \"Open\" anzeigen lassen. Die einzelnen Ordner k\u00f6nnen Sie \u00fcber durch einen Doppelklick aufklappen.</li> </ul> </li> </ul> <ul> <li>Sie wissen, was Sie tun.</li> </ul> <ul> <li>Wenn Sie einen anderen Editor/ein anderes IDE benutzen und denken ein Guide hier k\u00f6nnte helfen k\u00f6nnen Sie gerne einen Pull Request aufmachen und dieses erg\u00e4nzen...</li> </ul>"},{"location":"exercises/download-import/","title":"Herunterladen und Importieren von Haus\u00fcbungen in IntelliJ","text":"<p>Zum Bearbeiten der Haus\u00fcbungen ben\u00f6tigen Sie die von uns zur Verf\u00fcgung gestellten Vorlagen. Diese erhalten sie entweder, indem sie das zugeh\u00f6rige Git-Repository klonen, oder die Zip-Datei von Moodle herunterladen.</p>"},{"location":"exercises/download-import/#importieren-der-vorlage","title":"Importieren der Vorlage","text":"GitZip-Datei <ul> <li>Um die Repositories mit Git zu klonen, m\u00fcssen Sie zun\u00e4chst Git lokal installieren.</li> </ul> WindowsLinuxMacOS <ol> <li>Laden Sie sich Git herunter, indem Sie rechts auf \"Download for Windows\" dr\u00fccken.</li> <li>F\u00fchren Sie den soeben heruntergeladenen Installer aus.</li> <li>Dr\u00fccken Sie solange auf \"Next\", bis der Installationsprozess beginnt. Sie k\u00f6nnen die Standardeinstellungen des Installers \u00fcbernehmen und m\u00fcssen nichts weiter ausw\u00e4hlen.</li> <li>Dr\u00fccken Sie auf \"Finish um den Installationsprozess abzuschlie\u00dfen.</li> <li>Sie k\u00f6nnen nun mit dem Befehl \"git --version\" in einer Konsole \u00fcberpr\u00fcfen, ob Git erfolgreich installiert wurde.</li> <li>Sie k\u00f6nnen ein Terminal \u00f6ffnen, indem Sie in der Windowssuche (Win+ S) \"cmd\" eingeben.</li> </ol> <ul> <li>Auf Debian/Ubuntu Distributions k\u00f6nnen Sie Git mit dem folgenden Befehl installieren: <pre><code>sudo apt install git\n</code></pre></li> <li>Auf Arch Based Linux Systemen k\u00f6nnen Sie Git mit dem folgenden Befehl installieren: <pre><code>sudo pacman -S git\n</code></pre></li> </ul> <ol> <li>Sie k\u00f6nnen Git mit dem package installer Homebrew installieren. F\u00fchren Sie daf\u00fcr folgenden Befehl in einem Terminal aus:     <pre><code>brew install git\n</code></pre><ul> <li>Sie k\u00f6nnen ein Terminal \u00f6ffnen, indem Sie in der Suche (Cmd + Leertaste) \"Terminal\" eingeben</li> <li>Falls Sie Homebrew nicht installiert haben, k\u00f6nnen Sie es mit folgenden Befehl installieren: <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\n</code></pre></li> <li>Sie k\u00f6nnen selbstverst\u00e4ndlich auch einen anderen package installer verwenden.</li> </ul> </li> <li>Sie k\u00f6nnen nun mit dem Befehl \"git --version\" in einem Terminal \u00fcberpr\u00fcfen, ob Git erfolgreich installiert wurde.</li> </ol> <p>Achtung</p> <p>Wir empfehlen Ihnen f\u00fcr die Haus\u00fcbungen Git zu verwenden.</p> <ol> <li>Alternativ k\u00f6nnen Sie auch mit der bereitgestellten Zip-Datei arbeiten. Laden Sie sich daf\u00fcr aus dem Moodle Kurs die Zip-Datei der Vorlage f\u00fcr die entsprechende Haus\u00fcbung herunter.</li> <li>Entpacken Sie die Zip-Datei und speichern Sie den entpackten Ordner an einem Ort Ihrer Wahl.<ul> <li>Unter Windows k\u00f6nnen Sie Zip-Dateien entpacken, indem Sie im File Explorer einen Rechtsklick auf die Datei machen und auf \"Alles extrahieren...\" dr\u00fccken. Nachdem Sie     einen Speicherort angeben haben, m\u00fcssen Sie noch auf \"extrahieren\" dr\u00fccken, um die Datei zu entpacken.</li> <li>Unter Mac OS k\u00f6nnen Sie Zip-Dateien entpacken, indem Sie im Finder einen Doppelklick auf diese machen.</li> </ul> </li> <li>Gehen Sie nun in IntelliJ links oben im \"File\" Reiter auf \"open...\"<ul> <li>Wenn Sie IntelliJ das erste Mal \u00f6ffnen, dr\u00fccken Sie stattdessen rechts oben auf \"open\"</li> </ul> </li> <li>W\u00e4hlen Sie nun den Pfad zu dem Ordner, in dem die Vorlage gespeichert ist, aus und dr\u00fccken Sie auf \"OK\".</li> <li>Achten Sie darauf, dass Sie den richtigen Ordner importieren. Der Ordner sollte nach der Haus\u00fcbung benannt sein (z. B. \"FOP-2223-HXX-Student-master\" oder \"PX-Student-master\") und direkt die     build.gradle.kts Datei enthalten sein. W\u00e4hlen Sie beim Importieren nicht einen identisch benannten Oberordner aus.</li> <li>Falls Sie bereits ein Projekt ge\u00f6ffnet hatten, dr\u00fccken Sie auf \"This Window\".</li> <li>Dr\u00fccken Sie zum Schluss auf \"Trust Project\", wodurch sich die Vorlage \u00f6ffnet.</li> <li>Nun k\u00f6nnen Sie die Haus\u00fcbung bearbeiten.</li> </ol>"},{"location":"exercises/download-import/#repositories-klonen","title":"Repositories klonen","text":"<p>Achtung</p> <p>Forken Sie nicht die Repositories. Auf Forks hat jeder Zugriff, weshalb diese als Plagiarismus gewertet werden und Ihre Abgabe dann eventuell nicht von uns bewertet werden kann.</p> <ol> <li>IntelliJ bietet Ihnen die M\u00f6glichkeit, Git-Repositories automatisch zu klonen. W\u00e4hlen Sie daf\u00fcr links oben im \"File\" Reiter \"New\" -&gt; \"Project From Version Controll...\" aus.<ul> <li>Wenn Sie IntelliJ das erste Mal starten oder momentan kein Projekt ge\u00f6ffnet haben, m\u00fcssen Sie stattdessen rechts oben auf \"Get from VCS\" dr\u00fccken.</li> </ul> </li> <li>Geben Sie nun bei \"URL\" die URL zum Repository der entsprechenden Haus\u00fcbungen ein.<ul> <li>Ein Link zu den entsprechenden Repositories finden Sie auf Moodle.</li> </ul> </li> <li>W\u00e4hlen Sie bei \"Directory\" den Ort aus, an dem Sie das Projekt speichern m\u00f6chten.</li> <li>Dr\u00fccken Sie nun auf \"Clone\", um das Repository zu klonen.</li> <li>Falls Sie bereits ein Projekt ge\u00f6ffnet hatten, dr\u00fccken Sie auf \"This Window\".</li> <li>Nachdem das Klonen abgeschlossen ist, dr\u00fccken Sie auf \"Trust Project\", wodurch sich die Vorlage \u00f6ffnet.</li> <li>Nun k\u00f6nnen Sie die Haus\u00fcbung bearbeiten.</li> </ol>"},{"location":"exercises/download-import/#aktualisieren-der-vorlage","title":"Aktualisieren der Vorlage","text":"<ul> <li>Es kann vorkommen, dass wir nach der Ver\u00f6ffentlichung der Vorlage noch \u00c4nderungen an dieser vornehmen.</li> <li>Die Abgabe ist in i.d.R. mit jeder Version der Vorlage m\u00f6glich.</li> </ul> GitManuell <ul> <li>Wenn Sie die Vorlage mithilfe von Git geklont haben, k\u00f6nnen Sie sich die neuste Version der Vorlage ganz einfach herunterladen.</li> <li>In IntelliJ gibt es eine Git Integration, die alle ben\u00f6tigten Befehle f\u00fcr Sie ausf\u00fchrt. Die Befehle stehen hier trotzdem nochmal dabei, falls Sie nicht mit IntelliJ arbeiten.</li> <li>Zun\u00e4chst m\u00fcssen Sie Ihre \u00c4nderungen commiten. \u00d6ffnen Sie daf\u00fcr in IntelliJ am linken oberen Rand die Commit Ansicht, w\u00e4hlen Sie alle Dateien aus, die Sie bearbeitet haben, geben Sie eine commit Message und dr\u00fccken Sie auf \"Commit\".</li> <li>Alternativ k\u00f6nnen Sie die Commit Ansicht auch \u00fcber \"View\" -&gt; \"Tool Windows\" -&gt; \"Commit\" \u00f6ffnen.</li> <li>Falls das Commiten fehlschl\u00e4gt, weil gewisse checks nicht erfolgreich durchlaufen, dr\u00fccken Sie auf \"Commit Anyway\".</li> <li>Alternativer Befehl:       <pre><code>git commit -am \"commit Message\"\n</code></pre></li> <li>Nun k\u00f6nnen Sie die \u00c4nderungen zu Ihrer Version hinzuzuf\u00fcgen, indem Sie links oben in IntelliJ im Git Reiter auf \"Pull...\" dr\u00fccken. Dr\u00fccken Sie im Fenster, welches sich nun \u00f6ffnet erneut auf \"Pull\".</li> <li>Alternativer Befehl:       <pre><code>git pull origin master\n</code></pre></li> <li>Falls sich die \u00c4nderungen nicht im master branch befinden, m\u00fcssen sie stattdessen die \u00c4nderungen in Ihren master branch mergen. Dr\u00fccken Sie daf\u00fcr im Git Reiter oben links auf \"Fetch\" und danach auf \"Merge\". Geben Sie in dem Fenster, welches sich nun \u00f6ffnet, rechts den Branch an, in welchem sich die \u00c4nderungen befinden. Dr\u00fccken Sie daf\u00fcr rechts auf den Pfeil nach unten oder geben Sie manuell den Namen ein. Dr\u00fccken Sie zum Schluss auf \"Merge\".</li> <li>Falls Sie sich unsicher sind, welchen branch Sie ausw\u00e4hlen sollen, finden Sie unten links unten in der Git Ansicht eine \u00dcbersicht aller branches und mit einem Doppelklick auf diese eine Liste aller commits.</li> <li>Alternative Befehle:       <pre><code>git fetch origin\n</code></pre>       und       <pre><code>git merge origin &lt;branchName&gt;\n</code></pre></li> </ul> <ul> <li>Auch, wenn wir es nicht empfehlen, k\u00f6nnen Sie die Vorlage alternativ manuell updaten. Kopieren Sie daf\u00fcr entweder Ihre Implementation in die neue Vorlage oder die \u00c4nderungen aus der neuen Vorlage in die alte Vorlage.</li> </ul>"},{"location":"exercises/edit/","title":"Bearbeiten von Haus\u00fcbungen mit IntelliJ","text":""},{"location":"exercises/edit/#dateianzeige","title":"Dateianzeige","text":"<ul> <li>Am linken Rand finden Sie den Abschnitt \"Project\". Dort befindet sich eine \u00dcbersicht der Dateihierarchie des Projektes. Mit den Pfeilen links von Ordnern/Verzeichnissen k\u00f6nnen Sie die Ansicht erweitern bzw. verkleinern.</li> <li>In dem Verzeichnis src/main/java schreiben Sie den eigentlich Code.</li> <li>In dem Verzeichnis src/test/java schreiben Sie Ihre Tests.</li> </ul>"},{"location":"exercises/edit/#neue-dateien-erstellen","title":"Neue Dateien erstellen","text":"<ul> <li>Mit einem Rechtsklick auf ein Package k\u00f6nnen Sie \u00fcber new -&gt; Java Class eine neue Java Datei erstellen. Geben Sie daf\u00fcr den Namen an, w\u00e4hlen Sie aus, ob es eine Klasse, Interface, Enum oder Annotation sein soll und best\u00e4tigen Sie das Erstellen, indem Sie Enter dr\u00fccken.</li> <li>Sie k\u00f6nnen auf dieselbe Weise auch packages erstellen. W\u00e4hlen Sie daf\u00fcr \"package\" anstatt \"Java Class\" aus.</li> </ul>"},{"location":"exercises/edit/#gradle-tasks","title":"Gradle Tasks","text":"<ul> <li>Um die \u00dcbersicht mit allen Gradle Task zu \u00f6ffnen, dr\u00fccken Sie am rechten oberen Rand auf \"Gradle\".<ul> <li>Alternativ k\u00f6nnen Sie sich die Gradle Ansicht auch \u00fcber den Reiter \"View\" anzeigen lassen, indem Sie dann auf \"Tool Windows\" -&gt; \"Gradle\" gehen.</li> </ul> </li> <li>Klappen Sie den Ordner, der nach dem Projekt benannt ist, sowie den darin enthaltenen Ordner \"Tasks\". Nun sehen Sie alle Verzeichnisse, in denen Gradle Tasks enthalten sind.</li> <li>Anbei ist eine Tabelle mit allen relevanten Tasks. Die jeweiligen Tasks sind im Format \"&lt;group-name&gt;/&lt;task-name&gt;\" angegeben.</li> <li>Sie k\u00f6nnen eine Task mit einem Doppelklick auf sie ausf\u00fchren.</li> </ul> Gradle Task Beschreibung application/run F\u00fchrt die main Methode des Projektes aus verification/test F\u00fchrt Ihre selbstgeschriebenen Tests aus verification/graderPublicRun F\u00fchrt die von uns zur Verf\u00fcgung gestellten public Tests aus verification/check F\u00fchrt alle (selbstgeschriebenen + public) Tests aus build/mainBuildSubmission Erstellt die Abgabedatei im Ordner build/libs build/assemble Erstellt eine ausf\u00fchrbare Datei in build/libs build/build F\u00fchrt assemble und check aus"},{"location":"exercises/edit/#code-ausfuhren","title":"Code ausf\u00fchren","text":"<ul> <li>In IntelliJ gibt es verschiedene Methoden, wie Sie Ihren Code ausf\u00fchren k\u00f6nnen. Sie k\u00f6nnen eine der folgenden Methoden benutzten:<ol> <li>Wenn Sie eine Klasse mit einer main Methode betrachten, befindet sich bei der Zeilenangabe auf der H\u00f6he der main Methode und der Klassendefinition ein gr\u00fcnes Dreieck. Wenn Sie auf dieses draufdr\u00fccken und dann auf \"Run '...'\" dr\u00fccken.</li> <li>Machen Sie links in der Project Ansicht einen Rechtsklick auf eine Klasse mit einer main Methode und dr\u00fccken Sie auf \"Run '...'\".</li> <li>F\u00fchren Sie am rechten oberen Rand in der Gradle Ansicht die Task \"run\" im Ordner \"application\" aus.</li> <li>Dr\u00fccken Sie am oberen rechten Rand auf das gr\u00fcne Dreieck.<ul> <li>Beachten Sie, dass diese Methode die letzte Aktion erneut ausf\u00fchrt. Diese ist nicht zwangsl\u00e4ufig immer das Ausf\u00fchren des Codes.</li> </ul> </li> </ol> </li> <li>Wenn Ihr Code nicht terminiert, k\u00f6nnen Sie das Programm mit dem roten Quadrat am linken Rand stoppen.</li> </ul>"},{"location":"exercises/edit/#public-tests","title":"Public Tests","text":"<ul> <li>Jeweils zwei Wochen vor der Abgabefrist der \u00dcbungsbl\u00e4tter stellen wir Ihnen Public Tests zur Verf\u00fcgung, mit welchen Sie Teile Ihrer Implementation testen k\u00f6nnen.<ul> <li>Tragen Sie zun\u00e4chst in der build.gradle.kts Datei ihre pers\u00f6nlichen Daten ein. Siehe daf\u00fcr den ersten Punkt im Abschnitt Exportieren.</li> <li>Sie k\u00f6nnen die Public Tests mittels der Gradle Task verification/graderPublicRun ausf\u00fchren. Nach der Ausf\u00fchrung werden Ihnen in der Konsole die erreichte Punktzahl, sowie ein Link zu einer Datei mit weiteren Hinweisen angezeigt.</li> <li>Wenn Sie die Vorlage herunterladen bevor die Public Tests ver\u00f6ffentlicht wurden, m\u00fcssen Sie diese noch hinzuf\u00fcgen. Hinweise dazu finden Sie hier.</li> <li>Beachten Sie unbedingt auch die Hinweise bez\u00fcglich den Public Tests auf Moodle.</li> <li>Wenn Java zu wenig Speicher zur Verf\u00fcgung hat, kann es dazu kommen, dass Sie den Fehler \"java.lang.outOfMemoryError: Java heap space\" bekommen. Versuchen Sie zun\u00e4chst die Public Tests erneut auszuf\u00fchren oder IntelliJ neuzustarten. Falls der Fehler weiterhin auftritt, versuchen SieJava mehr Speicher zuzuweisen.</li> </ul> </li> </ul>"},{"location":"exercises/edit/#tests-ausfuhren","title":"Tests ausf\u00fchren","text":"<ul> <li>Sie k\u00f6nnen Ihre Tests auf dieselbe Weise ausf\u00fchren, wie Ihren Code.<ul> <li>Anstelle der Gradle Test \"application/run\" m\u00fcssen Sie die Task \"verification/test\" ausf\u00fchren.</li> <li>Wenn Sie in der Project Ansicht einen Rechtsklick auf einen h\u00f6her liegendes Package bzw. Verzeichnis machen, k\u00f6nnen Sie alle Test, die in diesem enthalten sind, auf einmal ausf\u00fchren.</li> </ul> </li> </ul>"},{"location":"exercises/edit/#fehler-und-warnungen-erkennen-und-beheben","title":"Fehler und Warnungen erkennen und beheben","text":"<ul> <li>IntelliJ zeigt Ihnen Syntaxfehler in Ihrem Code rot unterstrichenen an. Diese m\u00fcssen behoben werden.</li> <li>Warnungen werden Ihnen gelb unterstrichen angezeigt. Diese m\u00fcssen zwar nicht behoben werden, sollten es aber.</li> <li>Wenn Sie mit der Maus \u00fcber den rot oder gelb unterstrichenen Text gehen, wird Ihnen eine Beschreibung des Problems, sowie Vorschl\u00e4ge, wie es automatisch behoben werden kann, angezeigt.</li> <li>Am unteren linken Rand finden Sie im Abschnitt \"Problems\" eine \u00dcbersicht mit allen Fehlern und Warnungen.</li> </ul>"},{"location":"exercises/edit/#fehlermeldungen-verstehen","title":"Fehlermeldungen verstehen","text":"<ul> <li>Wenn Sie Ihr Programm ausf\u00fchren, \u00f6ffnet sich unten automatisch eine \u00dcbersicht \u00fcber den Verlauf des Programms und die Konsole. Hier werden Ihnen auch die Fehler angezeigt, die w\u00e4hrend dem Programmablauf auftreten.</li> <li>Damit Ihnen die vollst\u00e4ndigen Fehlermeldungen angezeigt werden, w\u00e4hlen Sie links von der Konsole die zweite Option von oben aus.</li> <li>Eine Fehlermeldung sieht z.B. wie folgt aus:</li> </ul> <p>Fehler</p> <p>Exception in thread \"main\" java.lang.ArithmeticException: / by zero</p> <p>at example.Divider.divide(Main.java:20)</p> <p>at example.Main.main(Main.java:10)</p> <ul> <li>Diese Fehlermeldung sagt Ihnen Folgendes:<ul> <li>Es ist eine ArithmeticException aufgetreten.</li> <li>Der Grund ist: \"/ by zero\".</li> <li>Der Fehler ist in der Methode divide der Klasse Divider in Zeile 20 aufgetreten.</li> <li>Diese Methode wurde von der Methode main der Klasse Main in Zeile 10 aufgerufen.</li> </ul> </li> </ul>"},{"location":"exercises/export-upload/","title":"Exportieren und Hochladen von Haus\u00fcbungen in IntelliJ","text":"<p>Warnung</p> <p>Zum Erstellen der Abgabedatei muss die Gradle Task \"build/mainBuildSubmission\" verwendet werden.</p> <ul> <li>Beachten Sie, dass Ihr Code zum Abgeben kompilierbar sein muss. IntelliJ zeigt Ihnen am unteren Rand im Abschnitt \"Problems\" alle Syntaxfehler in Rot an.</li> <li>Falls Ihnen beim Exportieren ein Fehler angezeigt wird, finden Sie im Abschnitt \"Bearbeiten von Haus\u00fcbungen\" eine \u00dcbersicht, wie h\u00e4ufig auftretende Fehler behoben werden k\u00f6nnen.</li> </ul>"},{"location":"exercises/export-upload/#exportieren","title":"Exportieren","text":"<ol> <li> <p>Tragen Sie in der build.gradle.kts Datei Ihre Tu-ID, sowie Ihren Vor- und Nachnamen ein. Ein Eintrag sieht z.B. wie folgt aus:    <pre><code>studentID = \"ab12cdef\"\nfirstName = \"Max\"\nlastName = \"Mustermann\"\n</code></pre></p> <ul> <li>Ver\u00e4ndern Sie bis auf diese drei Zeilen nichts Weiteres an der Datei.</li> <li>Beachten Sie, dass die Anf\u00fchrungszeichen notwendig sind.</li> </ul> </li> <li> <p>\u00d6ffnen Sie am rechten oberen Rand die Gradle \u00dcbersicht.</p> <ul> <li>Alternativ k\u00f6nnen Sie sich die Gradle Ansicht auch \u00fcber den Reiter \"View\" anzeigen lassen, indem Sie auf \"Tool Windows\" -&gt; \"Gradle\" gehen.</li> </ul> </li> <li> <p>Unter \"FOP-2223-HXX-Student\" (bzw. \"PX-Student\") -&gt; \"Task\" -&gt; \"build\" finden Sie die Gradle Task \"mainBuildSubmission\". F\u00fchren Sie diese mit einem Doppelklick aus.</p> <ul> <li>Wenn unten in der Konsole \"BUILD SUCCESSFUL\" steht, war das Erstellen der Abgabedatei erfolgreich.</li> </ul> </li> <li> <p>In dem Projektordner finden Sie nun im Ordner \"build\" einen weiteren Ordner \"libs\". In diesem befindet sich die Abgabedatei.</p> <ul> <li>Die Datei ist nach dem Schema \"hXX-TU-ID-firstName-lastName-submission.jar\" bzw. \"pX-TU-ID-firstName-lastName-submission.jar\" benannt. \u00c4ndern Sie diese Benennung nicht.</li> <li>Beachten Sie, dass IntelliJ die Datei nicht unbedingt sofort anzeigt. Suchen Sie die Datei am besten im File Explorer.</li> <li>Um den Inhalt der Abgabedatei zu \u00fcberpr\u00fcfen, k\u00f6nnen Sie die Jar-Datei entweder mit einem Entpackungsprogramm wie z. B. 7Zip oder mit dem Befehl \"jar -xf &lt;Dateiname&gt;\" in einer Konsole entpacken. In der Regel ist dies aber nicht notwendig.</li> <li>Beachten Sie, dass die exportierte Jar-Datei nicht ausf\u00fchrbar ist.</li> </ul> </li> </ol>"},{"location":"exercises/export-upload/#hochladen","title":"Hochladen","text":"<ul> <li>Laden Sie nun die zuvor erstellte Datei in Moodle bei der entsprechenden Abgabe hoch.<ul> <li>Sie finden das Abgabemodule auf der selben Seite, wie auch das \u00dcbungsblatt, unter dem Namen \"Abgabe zu \u00dcbungsblatt X\"</li> <li>Sie k\u00f6nnen bis zum Abgabeende beliebig oft Ihre Abgabe \u00e4ndern. Wir empfehlen Ihnen daher regelm\u00e4\u00dfig Ihren Zwischenstand hochzuladen, damit Sie nicht leer dastehen, wenn Sie die Abgabefrist verpassen.</li> <li>Alle Abgaben, die auf Moodle hochgeladen werden konnten, werden bewertet. Wenn keine Datei nicht hochgeladen werden kann, weil die Abgabefrist \u00fcberschritten wurde, kann die Aufgabe nicht bewertet werden.</li> </ul> </li> </ul>"},{"location":"exercises/fix-errors/","title":"Beheben von h\u00e4ufigen Fehlern","text":"Public TestsTypische ProgrammierfehlerDebuggingTechnische FehlerHilfreich Fragen stellen <p>Debugging beschreibt unter anderem das Beheben von Fehlern in Quelltexten.</p> <ul> <li>Stellen Sie zun\u00e4chst sicher, dass Sie den richtigen Ordner importiert haben. Der oberste Ordner sollte nach der Haus\u00fcbung benannt sein (z. B. \"FOP-2223-HXX-Student-master\" bzw. \"PX-Student-master\") und direkt die build.gradle.kts Datei enthalten sein. W\u00e4hlen Sie beim Importieren nicht einen identisch benannten Oberordner aus.</li> <li>Beachten Sie, dass es mit Gradle zu Problemen kommen kann, wenn das Projekt auf einer externen Festplatte gespeichert wurde.</li> <li>Anbei finden Sie ein paar m\u00f6gliche Fehler, welche Ihnen in der Konsole, die sich beim Ausf\u00fchren der des Programmes oder einer Gradle Task automatisch \u00f6ffnet, angezeigt werden. Damit Ihnen die vollst\u00e4ndigen Fehlermeldungen angezeigt werden, w\u00e4hlen Sie links von der Konsole die zweite Option von oben aus.</li> </ul> <p>Beachten Sie die Seite Bevor Sie eine Sprechstunde besuchen.</p>"},{"location":"exercises/fix-errors/#verstehen-der-resultate","title":"Verstehen der Resultate","text":"<p>Wenn Sie f\u00fcr eines der in den von uns bereitgestellten Public Tests gegebenen Kriterien nicht die h\u00f6chstm\u00f6gliche Punktzahl erreichen, ist Ihre L\u00f6sung wahrscheinlich nicht vollst\u00e4ndig korrekt.</p> <p>Keine Sorge! Gl\u00fccklicherweise sind die Resultate unserer Public Tests so aufgebaut, dass Sie Ihre Fehler selber verstehen k\u00f6nnen. In Ihrem Resultat finden Sie zu jedem in Ihrer L\u00f6sung nicht-erf\u00fcllten Kriterium eine Beschreibung sowie einen f\u00fcr Ihre L\u00f6sung individuell erstellten Kommentar. Beachten Sie die folgenden Hinweise zum Verstehen der Resultate.</p>"},{"location":"exercises/fix-errors/#beschreibung","title":"Beschreibung","text":"<p>Die Beschreibung eines Kriteriums finden Sie in der Spalte Kriterium.</p> <p>Um einen Fehler beheben zu k\u00f6nnen, m\u00fcssen Sie die Bedeutung des jeweilige Kriterium verstanden haben.</p> <p>Ein Kriterium kann auch dann nicht erf\u00fcllt sein, wenn Ihre Implementation einen Fehler enth\u00e4lt, der das \u00dcberpr\u00fcfen Ihrer L\u00f6sung verhindert! Sie werden im Kommentar auf solche Fehler hingewiesen.</p> <p>Informationen zu solchen Fehlern finden Sie aut der Abschnitt Typische Programmierfehler</p>"},{"location":"exercises/fix-errors/#kommentar","title":"Kommentar","text":"<p>Der Kommentar eines Kriteriums startet mit einer kurzen Fehlermeldung dar\u00fcber, wieso das jeweilige Kriterium nicht erf\u00fcllt wurde.</p> <p>Sie m\u00fcssen diese Fehlermeldung unbedingt verstanden haben, bevor Sie diesen Fehler sinnvoll beheben k\u00f6nnen!</p> <p>Nach dieser Fehlerbeschreibung folgen in der Regel Informationen dar\u00fcber, mit welchen Eingabedaten Ihr Programm getestet wurde. Diese Informationen k\u00f6nnen bereits in der Fehlermeldung enthalten sein.</p> <p>Versuchen Sie, Ihr Programm mit den gegebenen Eingabedaten selber auszuf\u00fchren und das Verhalten des Programms zu beobachten. Hierbei kann es n\u00fctzlich sein, Debugging anzuwenden.</p> <p>Sind die Public Tests fehlerhaft?</p> <p>Alle von uns bereitgestellten Public Tests wurden selbstverst\u00e4ndlich getestet.</p> <p>In wenigen F\u00e4llen unterst\u00fctzt ein Public Test nicht alle g\u00e4ngigen mit bis zur Bearbeitung vorgestellten Inhalten aus der Vorlesung umgesetzten Implementationen. Solche Probleme k\u00f6nnten mit neuen Versionen der Vorlage behoben sein. Beachten Sie die Seite Aktualisieren der Vorlage.</p>"},{"location":"exercises/fix-errors/#nullpointerexception","title":"NullPointerException","text":"<p>Dieser Fehler tritt immer dann auf, wenn man auf einer Variable eine Methode aufruft, oder auf ein Attribut zugreift, die Variable aber null ist, also ihr kein Wert zugewiesen wurde. Anbei finden Sie ein paar Beispiele wie dieser Fehler entstehen kann:</p> <pre><code>public class MyRobot {\n// robby wird mit null initialisiert, da keine explizite Zuweisung stattfindet\nRobot robby;\npublic void nullPointer1() {\nRobot robot = null;\n// Variable robot ist null\n// beim Aufruf von move wird eine eine NullPointerException geworfen\nrobot.move();\n}\npublic void nullPointer2() {\n// Attribut robby is null\n// beim Aufruf von move wird eine NullPointerException geworfen\nrobby.move();\n}\npublic void nullPointer3() {\n// neue lokale Variable wird erzeugt anstatt Objektattribut zuzuweisen\n// nullPointer2() w\u00fcrde nach Aufruf von nullPointer3 weiterhin NullPointerException werfen\nRobot robby = new Robot(0,0);\n}\n}\n</code></pre> <p>Bei allen drei Aufrufen der move Methode ist die Variable, bzw. das Attribut, auf dem die Methode aufgerufen wird null, wodurch effektiv dort steht null.move(). Da null keinem korrekt initialisiertem Objekt entspricht wirft dies eine NullPointerException. Der geworfene Fehler sieht dabei in etwa wie folgt aus:</p> <pre><code>Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"example.Robot.move()\" because \"robot\" is null\nat example.MyRobot.nullPointer1(MyRobot.java:6)\nat example.Main.main(Main.java:18)\n</code></pre>"},{"location":"exercises/fix-errors/#endlose-rekursion-bei-uberschreibenden-methoden","title":"Endlose Rekursion bei \u00fcberschreibenden Methoden","text":"<p>Beim \u00dcberschreiben von Methoden weist man typischerweise einer Methode eine neue Funktionalit\u00e4t zu. Will man in einer abgeleiteten Klasse die Implementation der Methode aus der Basisklasse nutzen, kann man diese mit \"super.\" und dem Methodennamen aufrufen. Wenn man z.B. beim \u00dcberschreiben die urspr\u00fcngliche Funktionalit\u00e4t nicht komplett ab\u00e4ndern, sondern nutzen und erweitern m\u00f6chte, bietet es sich an, in der \u00fcberschreibenden Methode die Implementation der Methode aus der Basisklasse mit \"super.\" zu verwenden.</p> <p>Dabei passiert es h\u00e4ufig, dass \"super.\" beim Methodenaufruf innerhalb der \u00fcberschreibenden Methode vergessen wird. Wird die \u00fcberschriebene Methode nun mit einem Objekt aufgerufen, ruft sie sich selbst erneut auf (statt die Methode der Basisklasse). In diesem Methodenaufruf ruft die Methode sich dann nochmals auf, diese dann auch wieder und so weiter.</p> <p>Hier ein Beispiel:</p> <pre><code>public class A {\npublic int doCalculation(int z) {\nreturn z*5;\n}\n}\n</code></pre> <pre><code>public class B1 extends A{\n@Override\npublic int doCalculation(int z) {\nint tmp = doCalculation(z); //f\u00fchrt zu Endlosrekursion\nreturn tmp+1;\n}\n}\n</code></pre> <p><pre><code>public class B2 extends A{\n@Override\npublic int doCalculation(int z) {\nint tmp = super.doCalculation(z); //berechnet z*5\nreturn tmp+1; //liefert z*5+1 zur\u00fcck\n}\n}\n</code></pre> Wie erkennt man solch einen Fehler? Endlose Rekursion erkennt man gut im Stacktrace: bei jedem Methodenaufruf wird ein neuer Frame auf den Stack gelegt, bis der Stack  volll\u00e4uft und ein StackOverflowError geworfen wird. Falls also die letzen Methodenaufrufe auf dem Stack alle identisch sind und ein StackOverflowError angezeigt wird, hat man vermutlich eine endlose Rekursion im Code, d.h. die Methode ruft sich immer wieder selber auf. Der obigen Code erzeuget dabei folgende Fehlermeldung: <pre><code>Exception in thread \"main\" java.lang.StackOverflowError\nat B1.doCalculation(B1.java:4)\nat B1.doCalculation(B1.java:4)\nat B1.doCalculation(B1.java:4)\nat B1.doCalculation(B1.java:4)\nat B1.doCalculation(B1.java:4)\n...\n</code></pre> Falls man eigentlich die Methode der Basisklasse aufrufen wollte, kann man einfach \"super.\" einf\u00fcgen um den Fehler zu l\u00f6sen.</p>"},{"location":"exercises/fix-errors/#methoden-eines-interfaces-wurde-nicht-implementiert","title":"Methoden eines Interfaces wurde nicht implementiert","text":"<p>In Interfaces k\u00f6nnen unter anderem Methoden deklariert werden, welche erst in den implementierenden Klassen implementiert werden. Daf\u00fcr gibt man bei der Erstellung der implementierenden Klasse mit \"implements\" an, welche Interfaces implementiert werden sollen.</p> <p>Falls noch nicht alle Methoden implementiert wurden, kommt es zu einer Fehlermeldung beim Kompilieren:</p> <p><pre><code>public interface I {\ndouble foo(int x);\nvoid bar();\n}\n</code></pre> <pre><code>public class C implements I{\n//fehlende Implementation der beiden Methoden\n}\n</code></pre></p> <p>Java Fehlermedung: <pre><code>java: C is not abstract and does not override abstract method bar() in I\n</code></pre> Wie kann man diesen Fehler l\u00f6sen?</p> <p>M\u00f6chte man nicht alle zu implementierenden Methoden in C implementieren, kann man C als abstract definieren. Dann k\u00f6nnen keine Objekte mit dem dynamischen Typen C erzeugt werden. Wenn man hingegen alle Methoden von I in C implementiert (hierbei auf korrekte Signatur achten!), muss C keine abstrakte Klasse sein, man kann also ganz normal Instanzen erstellen und nutzen.</p>"},{"location":"exercises/fix-errors/#arrayindexoutofboundsexception","title":"ArrayIndexOutOfBoundsException","text":"<p>F\u00fchrt man ein Programm mit den folgenden zwei Zeilen aus: <pre><code>int[] intArray = new int[5];\nfor (int i = 0; i &lt;= intArray.length; i++) { //von 0 bis inclusive 5\nSystem.out.println(intArray[i]);\n}\n</code></pre> erh\u00e4lt man solch eine Fehlermeldung: <pre><code>Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5\nat Main.main(Main.java:9)\n</code></pre> Hier ist, wie in der Fehlermeldung beschrieben, das Problem, dass versucht wird auf einen Arrayindex zuzugreifen, welcher au\u00dferhalb der Bounds des Arrays liegt.</p> <p>Aber was ist eigentlich der Bound eines Arrays und wie h\u00e4ngt dieser mit der L\u00e4nge zusammen? Die L\u00e4nge eines Arrays wird bei der Erstellung des Arrays in den eckigen Klammern angegeben und ist zur Laufzeit nicht ver\u00e4nderbar. Hier ist die L\u00e4nge 5, welche auch durch \".length\" abgefragt werden kann, wie man in der Schleife sieht. Das bedeutet aber nicht, dass man auf intArray[5] zugreifen kann: die Indizes beginnen nicht bei 1, sondern bei 0. Der Bound eines Arrays ist n\u00e4mlich immer {0,...,arrayName.length-1}, es kann also nur auf Indizes im Intervall [0, length - 1(!)] zugegriffen werden. Im Beispiel kann man also auf die Elemente im Array an den Indizes 0,1,2,3 und 4; nicht jedoch 5 zugreifen, weshalb die Exception geworfen wird.</p> <p>Um diesen Fehler zu beheben schaut man sich nochmal die in der Fehlermeldung angegebene Stelle im Code an  und \u00fcberpr\u00fcft, wo Indizes verwendet werden, die au\u00dferhalb des Bounds des Arrays liegen. Im Beispiel wurde in der Schleife bis i&lt;=intArray.length gez\u00e4hlt, also bis inklusive 5. Hier kann also einfach das  Gleichheitszeichen entfernt werden, um das Problem zu l\u00f6sen.</p>"},{"location":"exercises/fix-errors/#klassenmethode-mit-objekt-aufgerufen","title":"Klassenmethode mit Objekt aufgerufen","text":"<p>Klassenmethoden und Klassenattribute werden mit dem Schl\u00fcsselwort \"static\" gekennzeichnet. Klassenmethoden k\u00f6nnen weder auf Objektattribute zugreifen, noch Objektmethoden aufrufen. Da Klassenmethoden also nicht auf Objekte ihrer Klasse zugreifen d\u00fcrfen, m\u00fcssen sie auch nicht mit einem Objekt aufgerufen werden. Klassenmethoden sollten immer mit dem Klassenamen aufgerufen werden. Hier ein Beispiel:</p> <p><pre><code>public class Car {\nstatic int numberOfWheels = 4; //Klassenattribut (ist bei jedem Auto gleich)\nColor color; //Objektattribut, wird im Konstruktor Car initialisiert\npublic Car(Color color){\nthis.color = color;\n}\npublic static int getNumberOfWheels(){ //Klassenmethode\nreturn numberOfWheels;\n}\npublic Color getColor(){ //Objektmethode\nreturn color;\n}\n}\n</code></pre> <pre><code>//in Main\nCar myCar = new Car(Color.black);\nColor myCarColor = myCar.getColor();         //korrekt: Objektmethode mit Objekt aufrufen\nint myCarWheels = myCar.getNumberOfWheels(); //schlechte Programmierpraxis: Klassenmethode mit Objekt aufrufen\nColor carColor = Car.getColor();             //inkorrekt: Objektmethode mit Klassennamen aufrufen\nint carWheels = Car.getNumberOfWheels();     //korrekt: Klassenmethode mit Klassennamen aufrufen\n</code></pre></p> <p>Bei Zeile 4 in Main wird einem Folgendes angezeigt: <pre><code>Static member 'Car.getNumberOfWheels()' accessed via instance reference\n</code></pre> Es ist zwar m\u00f6glich, eine Klassenmethode mit einem Objekt der Klasse aufzurufen, aber eher unsch\u00f6ne Programmierpraxis. Normalerweise ruft man sie einfach mit dem Namen der Klasse auf.</p> <p>Beim Kompilieren des oben stehenden Codes bekommt erh\u00e4lt man au\u00dferdem diese Fehlermeldung: <pre><code>non-static method getColor() cannot be referenced from a static context\n</code></pre> Die Objektmethode getColor() gibt normalerweise den Wert des Objektattributs color zur\u00fcck. Wird sie nun nicht mit einem Objekt, sondern mit dem Klassennamen aufgerufen, kann sie nicht auf color zugreifen: es existiert kein Objekt, dessen color-Wert sie auslesen kann. Objektmethoden k\u00f6nnen nur mit Objekten aufgerufen werden.</p> <p>Mehr zu Klassenmethoden kann im Foliensatz 4c) auf den Seiten 34-50 gefunden werden.</p>"},{"location":"exercises/fix-errors/#isbooleanexpression-false","title":"isBooleanExpression == false","text":"<p>In der Bedingung einer if-Verzweigung, der Fortsetzungsbedingung einer while-Schleife und an anderen Stellen verwendet man boolesche Ausdr\u00fccke. Diese k\u00f6nnen zu true oder zu false auswerten. Au\u00dfer man verwendet keinen booleschen Ausdruck, denn dann kompiliert der Code nicht.</p> <p>Was sind also alles boolesche Ausdr\u00fccke und was nicht? Die booleschen Werte true und false sind die einfachsten booleschen Ausdr\u00fccke. Diese k\u00f6nnen z.B. mit dem logischen Oder (||) bzw. dem logischen Und (&amp;&amp;) oder der Negation (!) zu komplizierteren Ausdr\u00fccken kombiniert werden. Vergleiche von Zahlen mit ==, &lt;, &gt;=, != etc. funktionieren auch.</p> <p>Was sind h\u00e4ufig verwendete, aber inkorrekte Ausdr\u00fccke? Oft wird beim Vergleich von z.B. zwei Zahlen nur ein = verwendet, gemeint ist meist der Vergleich mit ==. Methoden, die keinen boolean zur\u00fcckgeben eignen sich nicht direkt, au\u00dfer man nutzt die R\u00fcckgabe und z.B. die equals-Methode, um einen booleschen Ausdruck zu erzeugen. Nicht ganz falsch, aber etwas unn\u00f6tig, ist es, einen boolean mit true oder false zu vergleichen: isOdd(5)==true ist semantisch \u00e4quivalent zu isOdd(5). Auch isEven(4) == false kann einfach zu !isEven(4) vereinfacht werden.</p> <p>Auch hier nochmal ein paar Beispiele:</p> <pre><code>int a = 5;\nif (a = 4){...} // hier w\u00e4re == richtig, denn eine Zuweisung ist kein boolescher Ausdruck\nwhile( isLessThan7(a) == false){ //ist zwar m\u00f6glich, aber !lessThan7(a) w\u00e4re sch\u00f6ner\na++;\n}\nboolean b = false;\nif (b = true){\nSystem.out.println(\"b is true\");\n}\n//\"b is true\" wird ausgegeben, da der Zuweisungsoperator den zugewiesenen Wert zur\u00fcckgibt\nboolean c = false;\nif (c == true){\nSystem.out.println(\"c is true\");\n}\n//\"c is true\" wird nicht ausgegeben, da false==true zu false auswertet\nboolean b = myCar.getColor();\n//falsch, da getColor eine Farbe und keinen boolean zur\u00fcckgibt\nboolean c = myCar.getColor().equals(Color.green);\n//korrekt, die equals Methode vergleicht die beiden Farben und gibt einen boolean zur\u00fcck\n</code></pre>"},{"location":"exercises/fix-errors/#raw-use-of-parameterized-class","title":"Raw use of parameterized class","text":"<p>Bei der Verwendung von generischen Klassen und Interfaces muss man die Typparameter instanziieren. Das geschieht bei der Einrichtung von Objekten: hier m\u00fcssen die Typparameter festgelegt werden.</p> <p>Hier ein Beispiel anhand des generischen Interfaces java.util.List&lt;E&gt;: List ist mit dem Typparameter E parameterisiert (s. Doku von List), welcher den Typen der Elemente angibt. Zuerst die inkorrekte Verwendung von List, mit den Warnungen von Intellij als Kommentar. In Zeilen vier bis sechs sieht man die korrekte Verwendung.</p> <p><pre><code>List list = new ArrayList&lt;&gt;(); //Raw use of parameterized class 'List'\nlist.add(myCar); //Unchecked call to 'add(E)' as a member of raw type 'java.util.List'\nList&lt;Car&gt; cars = new ArrayList&lt;&gt;();\n// bei der Einrichtung der Liste wurde ihr Typparameter mit Car instanziiert\ncars.add(myCar);\n</code></pre> Auf der rechten Seite der Zuweisung kann man, wie im Beispiel, die abk\u00fcrzende Schreibweise des \"Diamond-Operators\" verwenden. Hierbei werden die spitzen Klammern hingeschrieben, aber der Typparameter nicht erneut (s. Foliensatz 06 Generics S.66f). Auf der linken Seite muss der Typparameter aber explizit angegeben werden!</p> <p>Falls Sie also die Warnung \"Raw use of parameterized class\" bekommen, sollten Sie den Typparameter der generischen Klasse instanziieren, indem Sie nach dem Klassen-/ Interfacenamen in spitzen Klammern die zu verwendende Klasse schreiben.</p>"},{"location":"exercises/fix-errors/#weitere-fehler","title":"Weitere Fehler","text":"<p>Diese Seite wird fortlaufend um weitere Fehler erg\u00e4nzt. Falls Sie Vorschl\u00e4ge haben, schreiben Sie diese uns gerne.</p>"},{"location":"exercises/fix-errors/#debugging-mit-stil","title":"Debugging mit Stil","text":"<p>IntelliJ bietet Ihnen mit dem Debugger eine sehr hilfreiche Methode Fehler in Ihrem Code zu finden. Sie k\u00f6nnen den Debugger genauso starten, wie Sie Ihren Code mit den Ihnen bekannten Methoden ausf\u00fchren. Der Unterschied ist, dass Sie anstatt auf das gr\u00fcne Dreieck <code>Run ...</code> auf den roten K\u00e4fer <code>Debug ...</code> dr\u00fccken.</p>"},{"location":"exercises/fix-errors/#breakpoints","title":"Breakpoints","text":"<p>Wenn Sie den Debugger starten, wird er Ihren Code so lange normal ausf\u00fchren, bis er an einem Breakpoint ankommt. In dem Fall wird das Programm angehalten und Ihnen wird eine Liste der Attribute mit aktuellen Zuweisungen angezeigt.</p> <p>Mit einem Linksklick direkt neben der Zeilenangabe k\u00f6nnen Sie einen solchen Breakpoint erstellen. Dieser wird als roter Kreis angezeigt.</p>"},{"location":"exercises/fix-errors/#aktionen","title":"Aktionen","text":"<p>Alle Aktionen k\u00f6nnen auch mittels der Tasten am oberen Rand des Debugger-Bereichs ausgef\u00fchrt werden.</p> <ul> <li>Mit <code>F8</code> k\u00f6nnen Sie die momentane Zeile ausf\u00fchren.</li> <li>Mit <code>F7</code> k\u00f6nnen Sie die in die Methode, die als n\u00e4chstes ausgef\u00fchrt wird, hineinspringen.</li> <li>Mit <code>F9</code> k\u00f6nnen Sie das Programm bis zum n\u00e4chsten Breakpoint weiterlaufen lassen.</li> <li>Mit <code>Shift + F8</code> k\u00f6nnen Sie das Programm weiterlaufen lassen, bis die momentane Methode verlassen wird.</li> </ul>"},{"location":"exercises/fix-errors/#der-unsaubere","title":"Der Unsaubere","text":"<p>F\u00fcr den Fall, dass Ihnen das Debugging mittels Debugger zu schwierig erscheint, m\u00f6chten wir Ihnen einen unsauberen Klassiker vorstellen:</p> <pre><code>System.out.println(\"my string\");\n</code></pre> <p>Mit diesem Statement teilen Sie mit, dass beim Ausf\u00fchren des Programms an der jeweiligen Stelle im Programm eine Nachricht in der Konsole ausgegeben werden soll. Sie k\u00f6nnen innerhalb der runden Klammern jeden beliebigen String einsetzen.</p>"},{"location":"exercises/fix-errors/#warum-sollte-ich-das-tun","title":"Warum sollte ich das tun?","text":"<p>Sie k\u00f6nnen ein Print-Statement beispielsweise dann benutzen, wenn Sie sich eine der folgenden Fragen stellen.</p> <ul> <li>Wird dieser Teil meines Programms ausgef\u00fchrt?</li> <li>Was ist diesem Attribut an dieser Stelle meines Programms zugewiesen?</li> <li>Ist diese Bedingung an dieser Stelle meines Proramms erf\u00fcllt?</li> <li>Befindet sich mein Programm in einer Endlosschleife/-rekursion?</li> </ul>"},{"location":"exercises/fix-errors/#beispiel","title":"Beispiel","text":"<pre><code>public int doStuff(int n) {\nSystem.out.println(\"n: \" + n);\nSystem.out.println(\"crazyness &gt; 1337: \"crazyness &gt; 1337)\nwhile (crazyness &lt;= 9000) {\nSystem.out.println(\"current crazyness: \" + crazyness);\ndoCrazyStuff();\n}\nif (crazyness % 1337 == 42) {\nSystem.out.println(\"big red button pressed\");\npressBigRedButton();\n}\nint r = crazyness - n;\nSystem.out.println(\"return: \" + r)\nreturn r;\n}\n</code></pre>"},{"location":"exercises/fix-errors/#haufige-fehlermeldungen","title":"H\u00e4ufige Fehlermeldungen","text":"<ol> <li> <pre><code>[...] finished with non-zero exit value 1\n</code></pre> Diese Meldung sagt ihnen nur, dass ein Fehler aufgetreten ist. Wenn der eigentliche Fehler nicht angezeigt wird, dr\u00fccken Sie links neben der Konsolenausgabe auf die zweite Option von oben. Diese sollte \":run\" oder \":&lt;Mainclass&gt;:main()\" hei\u00dfen. </li> <li> <p><pre><code>A problem occurred configuring root project ...\nCould not resolve all files for configuration ':classpath'.\nCould not resolve org.tudalgo:algomate:0.1.0-SNAPSHOT.\n</code></pre> oder <pre><code>Execution failed for task ':compileJava'.\nerror: invalid source release: 17\n</code></pre> oder <pre><code>UnsupportedClassVersionError\n</code></pre> oder <pre><code>[...] has been compiled by a more recent version of the Java Runtime\n</code></pre> Es wird eine falsche Java Version benutzt. Siehe Korrekte Java Version in IntelliJ Einstellen.</p> </li> <li> <p><pre><code>Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.\n</code></pre> oder <pre><code>org.junit.platform.launcher.core.EngineDiscoveryOrchestrator lambda$logTestDescriptorExclusionReasons$7\nINFO: 0 containers and 1 tests were Method or class mismatch\n</code></pre> Sie k\u00f6nnen diese Meldung ignorieren.</p> </li> <li> <p><pre><code>Execution failed for task ':mainBuildSubmission'.\nThere were some errors preparing your submission. The following required properties were not set:\nstudentId\nfirstName\nlastName\n</code></pre> Sie haben vergessen, Ihre pers\u00f6nlichen Daten in der build.gradle.kts Datei hinzuzuf\u00fcgen. Siehe Anleitung zum Exportieren.</p> </li> <li> <p><pre><code>execution failed for task ':test'.\nThere were failing tests.\n</code></pre> Ihre selbstgeschriebenen Tests laufen nicht erfolgreich durch. Um dies zu beheben, fixen Sie entweder den Fehler, der in Ihren Tests auftritt, oder \u00e4ndern Sie in der build.gradle.kts Datei direkt unter Ihren pers\u00f6nlichen Daten requireTests von true auf false: <pre><code>requireTests = false\n</code></pre></p> </li> <li> <p><pre><code>execution failed for task ':graderPublicRun'.\nThere were failing tests.\n</code></pre> Die von uns zur Verf\u00fcgung gestellten public-Tests laufen nicht erfolgreich durch. Um dies zu beheben, fixen Sie entweder den Fehler, den die Tests aufzeigen, oder \u00e4ndern Sie in der build.gradle.kts Datei direkt unter Ihren pers\u00f6nlichen Daten requirePublicTests von true auf false: <pre><code>requireGraderPublic = false\n</code></pre></p> </li> <li> <p><pre><code>Execution failed for task ':compileJava'.\nCompilation failed; see the compiler error output for details.\n</code></pre> Es befinden sich vermutlich noch Syntaxfehler in Ihren Code, welche Sie vor dem Abgeben beheben m\u00fcssen. Sie finden unten links am Rand im Reiter \"Problems\" eine Auflistung aller Syntaxfehler.</p> </li> <li> <p><pre><code>Note: \\[...\\] uses unsafe or unchecked operations.\n</code></pre> Dies ist nur eine Warnung und verhindert nicht die Abgabe der Haus\u00fcbung. Sie sollten allerdings \u00fcberpr\u00fcfen, ob der entsprechende Abschnitt funktioniert.</p> </li> <li> <p><pre><code>failed to delete some children.\n</code></pre> Dieser Fehler entsteht meistens dadurch, dass der Zugriff auf bestimmte Dateien durch andere Prozesse, wie z. B. den Debugger, blockiert wird. Ein Neustart von IntelliJ oder Ihrem Rechner sollte das Problem beheben.</p> </li> <li> <p><pre><code>Java.lang.OutOfMemoryError: java heap space\n</code></pre> Dieser Fehler kann manchmal beim Ausf\u00fchren der Public Tests auftretten. Versuchen Sie zun\u00e4chst die Public Tests erneut auszuf\u00fchren oder IntelliJ neuzustarten. Falls der Fehler weiterhin auftritt, versuchen Sie Java mehr Speicher zuzuweisen.</p> </li> </ol>"},{"location":"exercises/fix-errors/#korrekte-java-version-in-intellij-einstellen","title":"Korrekte Java Version in IntelliJ einstellen","text":"<ol> <li>\u00dcberpr\u00fcfen Sie zun\u00e4chst in einem Terminal mit \"java --version\", ob Java 17 benutzt wird (s. Anleitung zum Installieren von Java)</li> <li>\u00dcberpr\u00fcfen Sie in IntelliJ, ob unter \"File\" -&gt; \"Project Structure...\" -&gt; \"Project\" -&gt; \"SDK\" Java 17 als Version angegeben ist.</li> <li>Falls dies nicht der Fall ist, w\u00e4hlen Sie Java 17 aus und dr\u00fccken Sie auf \"Apply\".</li> <li>Gehen Sie ebenfalls sicher, dass unter \"File\" -&gt; \"Settings\" -&gt; \"Build, Execution, Deployment\" -&gt; \"Build Tools\" -&gt; \"Gradle\" -&gt; \"Gradle JVM\" als Option \"Project SDK\" ausgew\u00e4hlt ist.</li> </ol>"},{"location":"exercises/fix-errors/#java-mehr-speicher-zuweisen","title":"Java mehr Speicher zuweisen","text":"<ol> <li>Gehen Sie in Ihrem User Ordner in der Ordner \".gradle\"</li> <li>Unter Windows finden Sie den Ordner unter \"C:\\Users\\&lt;UserName&gt;\\.gradle\" und auf Linux und Mac unter \"~/.gradle\"</li> <li>Falls nicht vorhanden, erstellen Sie die Datei \"gradle.properties\".</li> <li>F\u00fcgen Sie in dieser Datei eine Zeile mit folgendem Eintrag hinzu: <pre><code>org.gradle.jvmargs=-Xmx4096M\n</code></pre></li> <li>Sie k\u00f6nnen auch versuchen die Zahl am Ende zu erh\u00f6hen, wenn der Fehler weiterhin auftritt.</li> </ol> <p>Information</p> <p>Wenn Sie Ihr Problem nicht selber beheben konnten, k\u00f6nnen Sie entweder auf unserem Discord Server im Channel \"#technical-issues\" oder im Moodle Forum f\u00fcr technische Fragen nachfragen. F\u00fcgen Sie bei beiden am besten einen Ausschnitt der Konsolenausgabe mit dem Fehler als Screenshot oder Text an.</p>"},{"location":"preparation/installation-intellij/","title":"Installieren von IntelliJ","text":"<p>Warnung</p> <p>Beachten Sie, dass Eclipse von uns nicht mehr unterst\u00fctzt wird und wir Ihnen nicht garantieren k\u00f6nnen, dass das Bearbeiten der Haus\u00fcbungen mit Eclipse funktioniert.</p> <ul> <li>Sie k\u00f6nnen entweder die Community Edition oder die Ultimate Edition von IntelliJ zum Bearbeiten der Haus\u00fcbungen verwenden.     Die Ultimate Edition bittet Ihnen einige weiter Features und Sie erhalten sie als Student kostenlos. Daf\u00fcr m\u00fcssen Sie sich hier mit Ihrer studentischen E-Mail registrieren.     Weitere Information zur studentischen E-Mail finden Sie auf der Seite des HRZ.</li> </ul> WindowsArch Based LinuxMac OS <ol> <li>Laden Sie sich die Toolbox von JetBrains herunter.</li> <li>F\u00fchren Sie den heruntergeladenen Installer aus und dr\u00fccken Sie auf \"installieren\".</li> <li>W\u00e4hlen Sie \"JetBrains Toolbox ausf\u00fchren\" aus und dr\u00fccken Sie zum Schluss auf \"Fertigstellen\", um den Installationsprozess abzuschlie\u00dfen.</li> <li>Es \u00f6ffnet sich automatisch die Toolbox. Dr\u00fccken Sie nun auf \"Continue\", akzeptieren Sie die Nutzungsbedingungen und dr\u00fccken Sie zum Schluss auf \"Get started\".<ul> <li>Falls die Toolbox sich nicht automatisch \u00f6ffnet, k\u00f6nnen Sie sie auch manuell \u00fcber die Windowssuche (Win + S) \u00f6ffnen.</li> </ul> </li> <li>Installieren sie nun die Community oder Ultimate Edition von IntelliJ.</li> <li>Nun k\u00f6nnen Sie die Haus\u00fcbung mit IntelliJ bearbeiten. Befolgen Sie daf\u00fcr die Schritte der Anleitungen im Abschnitt \"Haus\u00fcbung\".<ul> <li>Wenn Sie IntelliJ das erste Mal starten werden Sie m\u00f6glicherweise noch gefragt, ob Sie Einstellungen importieren m\u00f6chten. Dies ben\u00f6tigen Sie nicht.</li> <li>Starten Sie die Ultimate Edition, werden Sie beim ersten mal aufgefordert sich mit Ihrem studentischen Account anzumelden.</li> </ul> </li> </ol> AUR-HelperManuell <p>Falls Sie einen AUR-Helper installiert haben, k\u00f6nnen Sie das Paket intellij-idea-ce, bzw. intellij-idea-ultimate-edition, installieren.</p> <ol> <li>Installieren Sie die Abh\u00e4ngigkeiten.     <pre><code>pacman -S base-devel git --needed\n</code></pre><ul> <li>F\u00fcr die Community Edition klonen Sie:     <pre><code>git clone https://aur.archlinux.org/intellij-idea-ce.git\n</code></pre></li> <li>F\u00fcr die Ultimate Edition klonen Sie:     <pre><code>git clone https://aur.archlinux.org/intellij-idea-ultimate-edition.git\n</code></pre></li> </ul> </li> <li>Wechseln Sie in das jeweilige Verzeichnis und installieren Sie das Paket.     <pre><code>cd intellij-idea-* &amp;&amp; makepgk -ifs\n</code></pre></li> <li>Nun k\u00f6nnen Sie die Haus\u00fcbung mit IntelliJ bearbeiten. Befolgen Sie daf\u00fcr die Schritte der Anleitungen im Abschnitt \"Haus\u00fcbung\".<ul> <li>Wenn Sie IntelliJ das erste Mal starten werden Sie m\u00f6glicherweise noch gefragt, ob Sie Einstellungen importieren m\u00f6chten. Dies ben\u00f6tigen Sie nicht.</li> <li>Starten Sie die Ultimate Edition, werden Sie beim ersten mal aufgefordert sich mit Ihrem studentischen Account anzumelden.</li> </ul> </li> </ol> <ol> <li>Laden Sie sich die Toolbox von JetBrains herunter.</li> <li>\u00d6ffnen Sie die heruntergeladene .dmg Datei und verschieben Sie die Toolbox per Drag&amp;Drop in den Applications Ordner oder auf den Desktop. Nun k\u00f6nnen Sie die .dmg Datei wieder schlie\u00dfen und auswerfen.</li> <li>Starten Sie nun die Toolbox. Dr\u00fccken Sie nun auf \"Continue\", akzeptieren Sie die Nutzungsbedingungen und dr\u00fccken Sie zum Schluss auf \"Get started\".</li> <li>Installieren sie nun die Community oder Ultimate Edition von IntelliJ.</li> <li>Nun k\u00f6nnen Sie die Haus\u00fcbung mit IntelliJ bearbeiten. Befolgen Sie daf\u00fcr die Schritte der Anleitungen im Abschnitt \"Haus\u00fcbung\".<ul> <li>Wenn Sie IntelliJ das erste Mal starten werden Sie m\u00f6glicherweise noch gefragt, ob Sie Einstellungen importieren m\u00f6chten. Dies ben\u00f6tigen Sie nicht.</li> <li>Starten Sie die Ultimate Edition, werden Sie beim ersten mal aufgefordert sich mit Ihrem studentischen Account anzumelden.</li> </ul> </li> </ol>"},{"location":"preparation/installation-java/","title":"Installieren von Java","text":"<p>Warnung</p> <p>Zum Bearbeiten der Haus\u00fcbungen ben\u00f6tigen Sie Java 17. Beachten Sie, dass Ihre ggf. vorhandene Java 11 Installation daf\u00fcr nicht ausreicht.</p> WindowsArch Based LinuxMac OS <ol> <li>\u00d6ffnen Sie die Adoptium Website.</li> <li>Dr\u00fccken Sie auf \"Latest LTS Release\". Der Download sollte automatisch starten.</li> <li>\u00d6ffnen Sie den soeben heruntergeladenen Installer und dr\u00fccken Sie auf \"weiter\", bzw. \"installieren\".<ul> <li>W\u00e4hlen Sie im Abschnitt \"Benutzerdefiniertes Setup\" bei \"JAVA_HOME-Variable konfigurieren\" die Option \"Wird auf der lokalen Festplatte installiert\" aus,      indem Sie auf das rote Kreuz daneben dr\u00fccken.</li> </ul> </li> <li>Nachdem die Installation abgeschlossen ist, dr\u00fccken Sie \"Fertig stellen\".</li> <li>Sie k\u00f6nnen \u00fcberpr\u00fcfen, ob Java korrekt installiert wurde, indem Sie im Terminal folgenden Befehl eingeben      <pre><code>java --version\n</code></pre><ul> <li>Sie k\u00f6nnen das Terminal \u00f6ffnen, indem Sie in der Windowssuche (Win + S) \"cmd\" eingeben.</li> <li>Wenn die Ausgabe in etwa so aussieht, ist die Installation erfolgreich. Achten Sie insbesondere darauf, dass es Java 17 ist. <pre><code>openjdk 17.0.2 2022-04-19\n</code></pre></li> </ul> </li> <li>Falls Ihnen bei der Ausgabe eine falsche Java Version oder ein Fehler angezeigt wird, \u00fcberpr\u00fcfen Sie wie folgt, ob Ihre Umgebungsvariablen korrekt gesetzt sind.<ol> <li>Geben Sie in die Windowssuche (Win + S) \"Systemumgebungsvariablen bearbeiten\" ein und \u00f6ffnen Sie das Fenster.</li> <li>Dr\u00fccken Sie rechts unten auf \"Umgebungsvariablen\".</li> <li>\u00dcberpr\u00fcfen Sie, ob in der unteren Liste eine Variable namens \"JAVA_HOME\" existiert und auf das Verzeichnis, in welchem Java 17 installiert ist, zeigt.<ul> <li>Der Inhalt sollte in etwa wie folgt aussehen:  <pre><code>C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.2.8-hotspot\\\n</code></pre></li> <li>Falls die Variable nicht vorhanden ist oder auf eine falsche Version zeigt, k\u00f6nnen Sie dies mit den Kn\u00f6pfen \"Neu...\" bzw. \"Bearbeiten...\" \u00e4ndern.</li> </ul> </li> <li>W\u00e4hlen Sie die Variable \"Path\" aus und dr\u00fccken Sie auf \"Bearbeiten...\".</li> <li>In der nun angezeigten Liste sollte der Eintrag \"%JAVA_HOME%\\bin\" enthalten sein. Falls nicht, f\u00fcgen Sie diesen rechts oben mit dem Knopf \"Neu\" hinzu.<ul> <li>Weitere Java Installationen sollten nicht enthalten sein.</li> </ul> </li> <li>Schlie\u00dfen Sie mit \"OK\" alle Fenster und \u00f6ffnen Sie ein neues Terminal. Es sollte nun die korrekte Java Version angezeigt werden.</li> </ol> </li> </ol> <ol> <li>Installieren Sie Java 17 (Als Root).      <pre><code>pacman -S openjdk17-src --needed\n</code></pre></li> <li>Setzen Sie diese Java Version als Standard (Als Root).      <pre><code>archlinux-java set java-17-openjdk\n</code></pre></li> <li>Pr\u00fcfen Sie die Java Installation.      <pre><code>java --version\n</code></pre></li> <li>Wenn die Ausgabe in etwa so aussieht, ist die Installation erfolgreich. Achten Sie insbesondere darauf, dass es Java 17 ist.      <pre><code>openjdk 17.0.3 2022-04-19\n</code></pre></li> </ol> <ol> <li>\u00d6ffnen Sie die  Adoptium Website.</li> <li>Dr\u00fccken Sie auf \"Latest LTS Release\". Der Download sollte automatisch starten.</li> <li>\u00d6ffnen Sie den soeben heruntergeladenen Installer und dr\u00fccken Sie auf \"Fortfahren\", bzw. \"Installieren\". Sie k\u00f6nnen die Standardeinstellungen \u00fcbernehmen und m\u00fcssen      nichts weiteres im Installer ausw\u00e4hlen.</li> <li>Nachdem die Installation abgeschlossen ist, dr\u00fccken Sie \"Schlie\u00dfen\".<ul> <li>Das Installationsprogramm ben\u00f6tigen Sie nun nicht mehr.</li> </ul> </li> <li>Sie k\u00f6nnen \u00fcberpr\u00fcfen, ob Java korrekt installiert wurde, indem Sie im Terminal folgenden Befehl eingeben      <pre><code>java --version\n</code></pre><ul> <li>Sie k\u00f6nnen das Terminal \u00f6ffnen, indem Sie in der Suche (Cmd + Leertaste) \"Terminal\" eingeben.</li> <li>Wenn die Ausgabe in etwa so aussieht, ist die Installation erfolgreich. Achten Sie insbesondere darauf, dass es Java 17 ist. <pre><code>openjdk 17.0.2 2022-04-19\n</code></pre></li> </ul> </li> </ol>"},{"location":"preparation/installation-racket/","title":"Installieren von DrRacket","text":"WindowsLinuxMac OS <ol> <li>Laden Sie hier DrRacket herunter. Achten Sie darauf, dass Windows als Betriebssystem ausgew\u00e4hlt ist.</li> <li>F\u00fchren Sie den heruntergeladenen Installer aus und dr\u00fccken Sie auf \"Next\", bzw. \"Install\", bis der Installationsprozess abgeschlossen ist und am Ende auf \"Finish\".</li> <li>Nachdem Sie DrRacket ge\u00f6ffnet haben, gehen Sie auf oben auf \"Language\" -&gt; \"Choose Language\" und w\u00e4hlen Sie unter \"Teaching Languages\" \"Advanced Student\" aus. Best\u00e4tigen Sie danach die Auswahl, indem Sie auf \"OK\" dr\u00fccken.</li> <li>Nun k\u00f6nnen Sie Racket Programme ausf\u00fchren, indem Sie rechts oben auf \"Run\" dr\u00fccken.</li> </ol> ManuellArch Based Linux <ol> <li>Laden Sie hier DrRacket herunter. Achten Sie darauf, dass Linux als Betriebssystem ausgew\u00e4hlt ist.</li> <li>Alternativ k\u00f6nnen Sie es auch mit dem folgenden Befehl ausf\u00fchren    <pre><code>wget https://mirror.racket-lang.org/installers/8.6/racket-8.6-x86_64-linux.sh\n</code></pre></li> <li>Stellen Sie mit  <pre><code>chmod +x racket-8.6-x86_64-linux.sh\n</code></pre>  sicher, dass der Installer ausf\u00fchrbar ist und f\u00fchren Sie diesen dann mit  <pre><code>sudo ./racket-8.6-x86_64-linux.sh\n</code></pre>  aus.</li> <li>Beantworten Sie die nun folgenden Fragen. Standardm\u00e4\u00dfig k\u00f6nnen Sie mit \"no\", \"1\" und \"/usr/local\"</li> <li>Nachdem Sie DrRacket ge\u00f6ffnet haben, gehen Sie auf oben auf \"Language\" -&gt; \"Choose Language\" und w\u00e4hlen Sie unter \"Teaching Languages\" \"Advanced Student\" aus. Best\u00e4tigen Sie danach die Auswahl, indem Sie auf \"OK\" dr\u00fccken.</li> <li>Nun k\u00f6nnen Sie Racket Programme ausf\u00fchren, indem Sie rechts oben auf \"Run\" dr\u00fccken.</li> </ol> <ol> <li>Installieren Sie Racket (Als Root).     <pre><code>pacman -S racket --needed\n</code></pre></li> <li>Pr\u00fcfen Sie die Racket Installation.     <pre><code>racket --version\n</code></pre></li> <li>Wenn die Ausgabe in etwa so aussieht, ist die Installation erfolgreich.     <pre><code>Welcome to Racket v8.6 [cs].\n</code></pre></li> <li>Nachdem Sie DrRacket ge\u00f6ffnet haben, gehen Sie auf oben auf \"Language\" -&gt; \"Choose Language\" und w\u00e4hlen Sie unter \"Teaching Languages\" \"Advanced Student\" aus. Best\u00e4tigen Sie danach die Auswahl, indem Sie auf \"OK\" dr\u00fccken.</li> <li>Nun k\u00f6nnen Sie Racket Programme ausf\u00fchren, indem Sie rechts oben auf \"Run\" dr\u00fccken.</li> </ol> <ol> <li>Laden Sie hier DrRacket herunter. Achten Sie darauf, dass Mac OS als Betriebssystem ausgew\u00e4hlt ist.</li> <li>\u00d6ffnen Sie die heruntergeladenen .dmg Datei.</li> <li>Kopieren Sie die Racket Installation in den Applications Ordner.</li> <li>Nachdem Sie DrRacket ge\u00f6ffnet haben, gehen Sie auf oben auf \"Language\" -&gt; \"Choose Language\" und w\u00e4hlen Sie unter \"Teaching Languages\" \"Advanced Student\" aus. Best\u00e4tigen Sie danach die Auswahl, indem Sie auf \"OK\" dr\u00fccken.</li> <li>Nun k\u00f6nnen Sie Racket Programme ausf\u00fchren, indem Sie rechts oben auf \"Run\" dr\u00fccken.</li> </ol>"},{"location":"preparation/matriculation-number/","title":"Hinzuf\u00fcgen der Matrikelnummer","text":"<p>Information</p> <p>Damit wir Ihre Abgaben Ihrer Matrikelnummer f\u00fcr die Klausurzulassung und den Bonus korrekt zuordnen k\u00f6nnen, m\u00fcssen Sie in ihren Moodle Profil ihre Matrikelnummer hinterlegen</p> <ol> <li>Melden Sie sich in Moodle an.</li> <li>Dr\u00fccken Sie rechts oben auf Ihren Namen und dann auf \"Profil\".</li> <li>Gehen Sie dort im Abschnitt \"Mehr Details\" auf \"Profil bearbeiten\".</li> <li>Tragen Sie nun unter \"Optional\" im Feld \"ID-Nummer\" ihre Matrikelnummer ein.<ul> <li>Sie finden Ihre Matrikelnummer unter anderem auf ihrem Studienausweis.</li> </ul> </li> <li>Speichern Sie die \u00c4nderungen, indem Sie unten auf der Seite auf \"Profil aktualisieren\" dr\u00fccken und \u00fcberpr\u00fcfen Sie, ob die Daten korrekt \u00fcbernommen wurden.</li> </ol>"}]}